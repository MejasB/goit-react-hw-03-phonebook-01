{"version":3,"sources":["components/contactForm/ContactFormStyled.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactListItem/ContactListItemStyled.js","components/contactListItem/ContactListItem.js","components/contactList/ContactList.js","App.js","index.js"],"names":["ContactFormContainer","styled","form","InputContainer","input","LabelContainer","label","ButtonContainer","button","ContactForm","state","name","number","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addNewContact","onSubmit","this","htmlFor","type","id","pattern","title","required","onChange","Component","Filter","filter","ContactListItemContainer","li","ContactListItem","deleteContact","className","onClick","ContactList","contacts","map","contact","uuid","App","some","alert","prevState","getFilteredContacts","toLowerCase","includes","trim","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a6476d6.chunk.js","sourcesContent":["import styled from 'styled-components';\nexport const ContactFormContainer = styled.form`\n  width: 50vw;\n  padding: 16px;\n  border: 2px solid grey;\n  border-radius: 4px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const InputContainer = styled.input`\n  display: block;\n  min-width: 300px;\n  padding: 5px 10px;\n  margin-bottom: 15px;\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  :focus {\n    outline: none;\n    border: 3px solid lightblue;\n  }\n`;\n\nexport const LabelContainer = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 18px;\n`;\n\nexport const ButtonContainer = styled.button`\n  padding: 2px 10px;\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  background-color: white;\n  font-size: 16px;\n  cursor: pointer;\n  transition-duration: 0.4s;\n  :hover {\n    background-color: lightblue;\n    color: white;\n    border-color: lightblue;\n  }\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  ButtonContainer,\n  ContactFormContainer,\n  InputContainer,\n  LabelContainer,\n} from \"./ContactFormStyled\";\n\nclass ContactForm extends Component {\n  state = { name: \"\", number: \"\" };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.addNewContact({\n      name: this.state.name,\n      number: this.state.number,\n    });\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <ContactFormContainer onSubmit={this.handleSubmit}>\n        <LabelContainer htmlFor=\"name\">Name</LabelContainer>\n        <InputContainer\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={this.handleChange}\n          value={this.state.name}\n        />\n        <LabelContainer htmlFor=\"number\">Number</LabelContainer>\n        <InputContainer\n          type=\"tel\"\n          id=\"number\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={this.handleChange}\n          value={this.state.number}\n        />\n        <ButtonContainer type=\"submit\">Add contact</ButtonContainer>\n      </ContactFormContainer>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addNewContact: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {InputContainer, LabelContainer} from '../contactForm/ContactFormStyled';\n\nconst Filter = ({handleChange, filter}) => {\n  return (\n    <>\n      <LabelContainer htmlFor=\"filter\">Find contacts by name</LabelContainer>\n      <InputContainer\n        id=\"filter\"\n        type=\"text\"\n        onChange={handleChange}\n        name=\"filter\"\n        value={filter}\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactListItemContainer = styled.li`\n  margin-bottom: 10px;\n  .contactListItemText {\n    display: inline-block;\n    margin-right: 10px;\n    font-size: 18px;\n  }\n`;\n","import React from 'react';\nimport {ButtonContainer} from '../contactForm/ContactFormStyled';\nimport {ContactListItemContainer} from './ContactListItemStyled';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({name, number, deleteContact}) => {\n  return (\n    <ContactListItemContainer>\n      <p className=\"contactListItemText\">\n        {name}: {number}\n      </p>\n      <ButtonContainer type=\"button\" onClick={deleteContact}>\n        Delete\n      </ButtonContainer>\n    </ContactListItemContainer>\n  );\n};\n\nContactListItem.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {v4 as uuid} from 'uuid';\nimport ContactListItem from '../contactListItem/ContactListItem';\n\nconst ContactList = ({contacts, deleteContact}) => {\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactListItem\n          name={contact.name}\n          number={contact.number}\n          key={uuid()}\n          deleteContact={() => deleteContact(contact.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired\n    })\n  )\n};\n\nexport default ContactList;\n","import { Component } from \"react\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport Filter from \"./components/filter/Filter\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport { v4 as uuid } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    // console.log('[componentDidMount]');\n    const contacts = localStorage.getItem(\"contacts\");\n    if (contacts) {\n      const parsedContacts = JSON.parse(contacts);\n      // console.log(parsedContacts);\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('[componentDidUpdate]');\n    if (prevState.contacts !== this.state.contacts) {\n      // console.log(prevState.contacts, 'prevState');\n      // console.log(this.state.contacts, 'state');\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addNewContact = ({ name, number }) => {\n    if (this.state.contacts.some((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    this.setState((prevState) => {\n      const newContacts = [\n        ...prevState.contacts,\n        { id: uuid(), name: name, number: number },\n      ];\n      return { contacts: newContacts };\n    });\n  };\n\n  getFilteredContacts = () =>\n    this.state.contacts.filter((contact) =>\n      contact.name\n        .toLowerCase()\n        .includes(this.state.filter.toLowerCase().trim())\n    );\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  deleteContact = (id) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addNewContact={this.addNewContact} />\n\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} handleChange={this.handleChange} />\n        <ContactList\n          contacts={this.getFilteredContacts()}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}